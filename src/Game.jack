class Game {

   field int topBorder;
   field int leftBorder;
   field int bottomBorder;
   field int rightBorder;
   field int direction;

   field int heightInCells;
   field int wigthInCells;
   field int cellSize;

   field int score;

   field Snake snake;
   field Food food;

   field int waitingTime;


   constructor Game new(int top, int left, int bottom, int right, int cell) {
      var char key;

      let topBorder = top;
      let leftBorder = left;
      let bottomBorder = bottom;
      let rightBorder = right;
      let cellSize = cell;

      let heightInCells = (bottomBorder - topBorder - 1) / (cellSize + 1);
      let wigthInCells = (rightBorder - leftBorder - 1) / (cellSize + 1);

      let direction = 0;
      
      while (true) {
          let key = Keyboard.keyPressed();
          if (key = 32){

             do Screen.clearScreen();

             do Frame.drawFrame(leftBorder, topBorder, rightBorder, bottomBorder, 1);
             do Frame.drawFrame(4, 4, leftBorder - 5, 170, 1);
             do Frame.drawTextForScore(1, 1);
             do Frame.drawScore(1, 7, score);

             let snake = Snake.new(heightInCells, wigthInCells, 5);
             let food = Food.new(topBorder, bottomBorder, leftBorder, rightBorder);

            return this;
         }
      }

      return this;
   }

    method void run() {
      var char key;
      var SnakeSegment head;
      var RelativeCoordinates headCoordinates, foodCoordinates;
      var int waitingTime;

      let score = 0;
      let waitingTime = 70;
      
      while (true) {
         let key = Keyboard.keyPressed();

         if (key = 43)  { if (waitingTime > 20) { let waitingTime = waitingTime - 5; } } //клавиша + для увеличения скорости
         if (key = 45)  { if (waitingTime < 120) { let waitingTime = waitingTime + 5; } } //клавиша - для уменьшения скорости
         if (key = 131) { if (~(direction = 2)) { let direction = 0; } } //стрелочка вверх для управления
         if (key = 132) { if (~(direction = 3)) { let direction = 1; } } //стрелочка вправо для управления
         if (key = 133) { if (~(direction = 0)) { let direction = 2; } } //стрелочка вниз для управления
         if (key = 130) { if (~(direction = 1)) { let direction = 3; } } //стрелочка влево для управления
         
         do Sys.wait(waitingTime);
         
         let head = snake.getHead();
         let headCoordinates = head.getRelativeCoordinates();

         let foodCoordinates = food.getRelativeCoordinates();


         if (headCoordinates.getX() = foodCoordinates.getX()) {
            if (headCoordinates.getY() = foodCoordinates.getY()) {
               do snake.increase(direction);
               do food.draw(false);
               do food.dispose();
               let food = Food.new(topBorder, bottomBorder, leftBorder, rightBorder);
               let score = score + 1;
               do Frame.drawScore(1, 7, score);
            }
         }
         
         do snake.draw(true);
         do food.draw(true);

         if (~snake.move(direction)) {
            do EndScreen.drawEnd(8, 24, score, this);
         }

         if (snake.isCollision()) {
            do EndScreen.drawEnd(8, 24, score, this);
         }
      }
      return;
   }

     method void dispose() {
          do Memory.deAlloc(this);
          return;
     }
}